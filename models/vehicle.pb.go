// Code generated by protoc-gen-go. DO NOT EDIT.
// source: vehicle.proto

package models

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type Vehicle_Transmission int32

const (
	Vehicle_AUTOMATIC Vehicle_Transmission = 0
	Vehicle_MANUAL    Vehicle_Transmission = 1
)

var Vehicle_Transmission_name = map[int32]string{
	0: "AUTOMATIC",
	1: "MANUAL",
}
var Vehicle_Transmission_value = map[string]int32{
	"AUTOMATIC": 0,
	"MANUAL":    1,
}

func (x Vehicle_Transmission) String() string {
	return proto.EnumName(Vehicle_Transmission_name, int32(x))
}
func (Vehicle_Transmission) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_vehicle_d5ca1dfa09df3a4b, []int{0, 0}
}

// The request message containing the Vehicle Information
type Vehicle struct {
	Id                   string               `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Manufacturer         string               `protobuf:"bytes,2,opt,name=manufacturer,proto3" json:"manufacturer,omitempty"`
	Model                string               `protobuf:"bytes,3,opt,name=model,proto3" json:"model,omitempty"`
	Price                float32              `protobuf:"fixed32,4,opt,name=price,proto3" json:"price,omitempty"`
	Mileage              int32                `protobuf:"varint,5,opt,name=mileage,proto3" json:"mileage,omitempty"`
	ExteriorColor        string               `protobuf:"bytes,6,opt,name=exterior_color,json=exteriorColor,proto3" json:"exterior_color,omitempty"`
	InteriorColor        string               `protobuf:"bytes,7,opt,name=interior_color,json=interiorColor,proto3" json:"interior_color,omitempty"`
	Transmission         Vehicle_Transmission `protobuf:"varint,8,opt,name=transmission,proto3,enum=models.Vehicle_Transmission" json:"transmission,omitempty"`
	XXX_NoUnkeyedLiteral struct{}             `json:"-"`
	XXX_unrecognized     []byte               `json:"-"`
	XXX_sizecache        int32                `json:"-"`
}

func (m *Vehicle) Reset()         { *m = Vehicle{} }
func (m *Vehicle) String() string { return proto.CompactTextString(m) }
func (*Vehicle) ProtoMessage()    {}
func (*Vehicle) Descriptor() ([]byte, []int) {
	return fileDescriptor_vehicle_d5ca1dfa09df3a4b, []int{0}
}
func (m *Vehicle) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Vehicle.Unmarshal(m, b)
}
func (m *Vehicle) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Vehicle.Marshal(b, m, deterministic)
}
func (dst *Vehicle) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Vehicle.Merge(dst, src)
}
func (m *Vehicle) XXX_Size() int {
	return xxx_messageInfo_Vehicle.Size(m)
}
func (m *Vehicle) XXX_DiscardUnknown() {
	xxx_messageInfo_Vehicle.DiscardUnknown(m)
}

var xxx_messageInfo_Vehicle proto.InternalMessageInfo

func (m *Vehicle) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *Vehicle) GetManufacturer() string {
	if m != nil {
		return m.Manufacturer
	}
	return ""
}

func (m *Vehicle) GetModel() string {
	if m != nil {
		return m.Model
	}
	return ""
}

func (m *Vehicle) GetPrice() float32 {
	if m != nil {
		return m.Price
	}
	return 0
}

func (m *Vehicle) GetMileage() int32 {
	if m != nil {
		return m.Mileage
	}
	return 0
}

func (m *Vehicle) GetExteriorColor() string {
	if m != nil {
		return m.ExteriorColor
	}
	return ""
}

func (m *Vehicle) GetInteriorColor() string {
	if m != nil {
		return m.InteriorColor
	}
	return ""
}

func (m *Vehicle) GetTransmission() Vehicle_Transmission {
	if m != nil {
		return m.Transmission
	}
	return Vehicle_AUTOMATIC
}

// The response message containing the status of the request
type VehicleQuery struct {
	Id                   string   `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Query                string   `protobuf:"bytes,2,opt,name=query,proto3" json:"query,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *VehicleQuery) Reset()         { *m = VehicleQuery{} }
func (m *VehicleQuery) String() string { return proto.CompactTextString(m) }
func (*VehicleQuery) ProtoMessage()    {}
func (*VehicleQuery) Descriptor() ([]byte, []int) {
	return fileDescriptor_vehicle_d5ca1dfa09df3a4b, []int{1}
}
func (m *VehicleQuery) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_VehicleQuery.Unmarshal(m, b)
}
func (m *VehicleQuery) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_VehicleQuery.Marshal(b, m, deterministic)
}
func (dst *VehicleQuery) XXX_Merge(src proto.Message) {
	xxx_messageInfo_VehicleQuery.Merge(dst, src)
}
func (m *VehicleQuery) XXX_Size() int {
	return xxx_messageInfo_VehicleQuery.Size(m)
}
func (m *VehicleQuery) XXX_DiscardUnknown() {
	xxx_messageInfo_VehicleQuery.DiscardUnknown(m)
}

var xxx_messageInfo_VehicleQuery proto.InternalMessageInfo

func (m *VehicleQuery) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *VehicleQuery) GetQuery() string {
	if m != nil {
		return m.Query
	}
	return ""
}

// The response message containing the status of the request
type VehicleReply struct {
	Success              bool     `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
	Message              string   `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	Data                 *Vehicle `protobuf:"bytes,3,opt,name=data,proto3" json:"data,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *VehicleReply) Reset()         { *m = VehicleReply{} }
func (m *VehicleReply) String() string { return proto.CompactTextString(m) }
func (*VehicleReply) ProtoMessage()    {}
func (*VehicleReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_vehicle_d5ca1dfa09df3a4b, []int{2}
}
func (m *VehicleReply) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_VehicleReply.Unmarshal(m, b)
}
func (m *VehicleReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_VehicleReply.Marshal(b, m, deterministic)
}
func (dst *VehicleReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_VehicleReply.Merge(dst, src)
}
func (m *VehicleReply) XXX_Size() int {
	return xxx_messageInfo_VehicleReply.Size(m)
}
func (m *VehicleReply) XXX_DiscardUnknown() {
	xxx_messageInfo_VehicleReply.DiscardUnknown(m)
}

var xxx_messageInfo_VehicleReply proto.InternalMessageInfo

func (m *VehicleReply) GetSuccess() bool {
	if m != nil {
		return m.Success
	}
	return false
}

func (m *VehicleReply) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

func (m *VehicleReply) GetData() *Vehicle {
	if m != nil {
		return m.Data
	}
	return nil
}

func init() {
	proto.RegisterType((*Vehicle)(nil), "models.Vehicle")
	proto.RegisterType((*VehicleQuery)(nil), "models.VehicleQuery")
	proto.RegisterType((*VehicleReply)(nil), "models.VehicleReply")
	proto.RegisterEnum("models.Vehicle_Transmission", Vehicle_Transmission_name, Vehicle_Transmission_value)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// VehicleServerClient is the client API for VehicleServer service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type VehicleServerClient interface {
	// Request handlers
	Get(ctx context.Context, in *VehicleQuery, opts ...grpc.CallOption) (*VehicleReply, error)
	Post(ctx context.Context, in *Vehicle, opts ...grpc.CallOption) (*VehicleReply, error)
	Put(ctx context.Context, in *Vehicle, opts ...grpc.CallOption) (*VehicleReply, error)
	Del(ctx context.Context, in *VehicleQuery, opts ...grpc.CallOption) (*VehicleReply, error)
}

type vehicleServerClient struct {
	cc *grpc.ClientConn
}

func NewVehicleServerClient(cc *grpc.ClientConn) VehicleServerClient {
	return &vehicleServerClient{cc}
}

func (c *vehicleServerClient) Get(ctx context.Context, in *VehicleQuery, opts ...grpc.CallOption) (*VehicleReply, error) {
	out := new(VehicleReply)
	err := c.cc.Invoke(ctx, "/models.VehicleServer/Get", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *vehicleServerClient) Post(ctx context.Context, in *Vehicle, opts ...grpc.CallOption) (*VehicleReply, error) {
	out := new(VehicleReply)
	err := c.cc.Invoke(ctx, "/models.VehicleServer/Post", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *vehicleServerClient) Put(ctx context.Context, in *Vehicle, opts ...grpc.CallOption) (*VehicleReply, error) {
	out := new(VehicleReply)
	err := c.cc.Invoke(ctx, "/models.VehicleServer/Put", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *vehicleServerClient) Del(ctx context.Context, in *VehicleQuery, opts ...grpc.CallOption) (*VehicleReply, error) {
	out := new(VehicleReply)
	err := c.cc.Invoke(ctx, "/models.VehicleServer/Del", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// VehicleServerServer is the server API for VehicleServer service.
type VehicleServerServer interface {
	// Request handlers
	Get(context.Context, *VehicleQuery) (*VehicleReply, error)
	Post(context.Context, *Vehicle) (*VehicleReply, error)
	Put(context.Context, *Vehicle) (*VehicleReply, error)
	Del(context.Context, *VehicleQuery) (*VehicleReply, error)
}

func RegisterVehicleServerServer(s *grpc.Server, srv VehicleServerServer) {
	s.RegisterService(&_VehicleServer_serviceDesc, srv)
}

func _VehicleServer_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VehicleQuery)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VehicleServerServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/models.VehicleServer/Get",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VehicleServerServer).Get(ctx, req.(*VehicleQuery))
	}
	return interceptor(ctx, in, info, handler)
}

func _VehicleServer_Post_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Vehicle)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VehicleServerServer).Post(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/models.VehicleServer/Post",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VehicleServerServer).Post(ctx, req.(*Vehicle))
	}
	return interceptor(ctx, in, info, handler)
}

func _VehicleServer_Put_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Vehicle)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VehicleServerServer).Put(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/models.VehicleServer/Put",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VehicleServerServer).Put(ctx, req.(*Vehicle))
	}
	return interceptor(ctx, in, info, handler)
}

func _VehicleServer_Del_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VehicleQuery)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VehicleServerServer).Del(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/models.VehicleServer/Del",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VehicleServerServer).Del(ctx, req.(*VehicleQuery))
	}
	return interceptor(ctx, in, info, handler)
}

var _VehicleServer_serviceDesc = grpc.ServiceDesc{
	ServiceName: "models.VehicleServer",
	HandlerType: (*VehicleServerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Get",
			Handler:    _VehicleServer_Get_Handler,
		},
		{
			MethodName: "Post",
			Handler:    _VehicleServer_Post_Handler,
		},
		{
			MethodName: "Put",
			Handler:    _VehicleServer_Put_Handler,
		},
		{
			MethodName: "Del",
			Handler:    _VehicleServer_Del_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "vehicle.proto",
}

func init() { proto.RegisterFile("vehicle.proto", fileDescriptor_vehicle_d5ca1dfa09df3a4b) }

var fileDescriptor_vehicle_d5ca1dfa09df3a4b = []byte{
	// 374 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x52, 0xcf, 0xee, 0x93, 0x40,
	0x10, 0x2e, 0x50, 0x68, 0x3b, 0x42, 0x6d, 0x36, 0x3d, 0x6c, 0x8c, 0x07, 0x82, 0x31, 0xc1, 0x0b,
	0x26, 0xad, 0x0f, 0x20, 0xa9, 0x89, 0x31, 0xb1, 0x5a, 0xb1, 0xf5, 0x6a, 0x10, 0xc6, 0xba, 0x09,
	0xb0, 0x75, 0x17, 0x1a, 0xfb, 0x72, 0x3e, 0x88, 0x4f, 0x63, 0xd8, 0x05, 0xd3, 0x62, 0x7e, 0x87,
	0x1e, 0xbf, 0x3f, 0xf3, 0xed, 0xcc, 0x97, 0x05, 0xef, 0x8c, 0x3f, 0x58, 0x56, 0x60, 0x74, 0x12,
	0xbc, 0xe6, 0xc4, 0x29, 0x79, 0x8e, 0x85, 0x0c, 0x7e, 0x9b, 0x30, 0xf9, 0xa2, 0x15, 0x32, 0x07,
	0x93, 0xe5, 0xd4, 0xf0, 0x8d, 0x70, 0x96, 0x98, 0x2c, 0x27, 0x01, 0xb8, 0x65, 0x5a, 0x35, 0xdf,
	0xd3, 0xac, 0x6e, 0x04, 0x0a, 0x6a, 0x2a, 0xe5, 0x86, 0x23, 0x4b, 0xb0, 0x55, 0x12, 0xb5, 0x94,
	0xa8, 0x41, 0xcb, 0x9e, 0x04, 0xcb, 0x90, 0x8e, 0x7d, 0x23, 0x34, 0x13, 0x0d, 0x08, 0x85, 0x49,
	0xc9, 0x0a, 0x4c, 0x8f, 0x48, 0x6d, 0xdf, 0x08, 0xed, 0xa4, 0x87, 0xe4, 0x39, 0xcc, 0xf1, 0x57,
	0x8d, 0x82, 0x71, 0xf1, 0x35, 0xe3, 0x05, 0x17, 0xd4, 0x51, 0x71, 0x5e, 0xcf, 0x6e, 0x5a, 0xb2,
	0xb5, 0xb1, 0xea, 0xc6, 0x36, 0xd1, 0xb6, 0x9e, 0xd5, 0xb6, 0xd7, 0xe0, 0xd6, 0x22, 0xad, 0x64,
	0xc9, 0xa4, 0x64, 0xbc, 0xa2, 0x53, 0xdf, 0x08, 0xe7, 0xab, 0xa7, 0x91, 0x3e, 0x39, 0xea, 0xce,
	0x8d, 0xf6, 0x57, 0x9e, 0xe4, 0x66, 0x22, 0x78, 0x01, 0xee, 0xb5, 0x4a, 0x3c, 0x98, 0xc5, 0x87,
	0xfd, 0xc7, 0x6d, 0xbc, 0x7f, 0xb7, 0x59, 0x8c, 0x08, 0x80, 0xb3, 0x8d, 0x3f, 0x1c, 0xe2, 0xf7,
	0x0b, 0x23, 0x78, 0x05, 0x6e, 0x17, 0xf8, 0xa9, 0x41, 0x71, 0xf9, 0xaf, 0xc4, 0x25, 0xd8, 0x3f,
	0x5b, 0xa1, 0x6b, 0x4f, 0x83, 0xe0, 0xf8, 0x6f, 0x2a, 0xc1, 0x53, 0x71, 0x69, 0xab, 0x91, 0x4d,
	0x96, 0xa1, 0x94, 0x6a, 0x74, 0x9a, 0xf4, 0x50, 0x95, 0x86, 0x52, 0xb6, 0xa5, 0xe9, 0x84, 0x1e,
	0x92, 0x67, 0x30, 0xce, 0xd3, 0x3a, 0x55, 0xcd, 0x3f, 0x5a, 0x3d, 0x1e, 0x9c, 0x97, 0x28, 0x71,
	0xf5, 0xc7, 0x00, 0xaf, 0x63, 0x3e, 0xa3, 0x38, 0xa3, 0x20, 0x6b, 0xb0, 0xde, 0x62, 0x4d, 0x96,
	0x03, 0xbf, 0xda, 0xfe, 0xc9, 0x90, 0x55, 0xdb, 0x05, 0x23, 0xf2, 0x12, 0xc6, 0x3b, 0x2e, 0x6b,
	0x32, 0x7c, 0xe5, 0xc1, 0x81, 0x08, 0xac, 0x5d, 0x73, 0x87, 0x7f, 0x0d, 0xd6, 0x9b, 0xf6, 0xe3,
	0xdc, 0xb3, 0xd5, 0x37, 0x47, 0xfd, 0xe5, 0xf5, 0xdf, 0x00, 0x00, 0x00, 0xff, 0xff, 0x7b, 0x9e,
	0xe3, 0x45, 0xdc, 0x02, 0x00, 0x00,
}
